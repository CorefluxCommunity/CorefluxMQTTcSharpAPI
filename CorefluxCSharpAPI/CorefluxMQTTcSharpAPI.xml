<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CorefluxMQTTcSharpAPI</name>
    </assembly>
    <members>
        <member name="M:Coreflux.API.cSharp.Networking.MQTT.MQTTController.Start(System.String,System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initialize the global  MQTT client
            </summary>
        </member>
        <member name="M:Coreflux.API.cSharp.Networking.MQTT.MQTTController.StartAsync(System.String,System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initialize the global  MQTT client asyncrounsly
            </summary>
        </member>
        <member name="M:Coreflux.API.cSharp.Networking.MQTT.MQTTController.client_MQTTMsgDisconnected">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Coreflux.API.cSharp.Networking.MQTT.MQTTController.Publish(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Publishes a retain topic payload
            </summary>
            <param name="topic"></param>
            <param name="payload"></param>
            <param name="QosLevel"></param>
            <param name="Retain"></param>
        </member>
        <member name="M:Coreflux.API.cSharp.Networking.MQTT.MQTTController.PublishAsy(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Publishes a retain topic payload async
            </summary>
            <param name="topic"></param>
            <param name="payload"></param>
            <param name="QosLevel"></param>
            <param name="Retain"></param>
        </member>
        <member name="M:Coreflux.API.cSharp.Networking.MQTT.MQTTController.Subscribe(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="topic"></param>
            <param name="QosLevel"></param>
        </member>
        <member name="M:Coreflux.API.cSharp.Networking.MQTT.MQTTController.SubscribeAsy(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="topic"></param>
            <param name="QosLevel"></param>
        </member>
        <member name="M:Coreflux.API.cSharp.Networking.MQTT.MQTTController.SubscribeAsync(System.String,System.Int32)">
            <summary>
            Subscribes Async the topic
            </summary>
            <param name="topic"></param>
            <param name="qos"></param>
            <returns></returns>
        </member>
        <member name="M:Coreflux.API.cSharp.Networking.MQTT.MQTTController.PublishAsync(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Publish Message.
            </summary>
            <param name="topic">Topic.</param>
            <param name="payload">Payload.</param>
            <param name="retainFlag">Retain flag.</param>
            <param name="qos">Quality of Service.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Coreflux.API.cSharp.Networking.MQTT.MQTTController.AddTopicToData(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="topic"></param>
            <param name="qoslevel"></param>
        </member>
        <member name="M:Coreflux.API.cSharp.Networking.MQTT.MQTTController.ConnectAsync">
            <summary>
            Connect to broker aysnc and construct the handled client
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Coreflux.API.cSharp.Networking.MQTT.MQTTController.Connected">
            <summary>
            Verifies the connection to broker
            </summary>
            <returns>True if connected to broker</returns>
        </member>
        <member name="M:Coreflux.API.cSharp.Networking.MQTT.MQTTController.Stop">
            <summary>
            Stops the client and disconnects entirelly to  the broker
            </summary>
        </member>
        <member name="M:Coreflux.API.cSharp.Networking.MQTT.MQTTController.SetData(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Publishses the topics
            </summary>
            <param name="topic">The topic it is required to publish </param>
            <param name="payload">The payload required to publish </param>
            <param name="qoslevel">The level of quality of service 0,1,2</param>
            <param name="retain">If the topic will be retain or not on the broker True/False</param>
        </member>
        <member name="M:Coreflux.API.cSharp.Networking.MQTT.MQTTController.SetDataAsync(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Publishses the topics  async
            </summary>
            <param name="topic">The topic it is required to publish </param>
            <param name="payload">The payload required to publish </param>
            <param name="qoslevel">The level of quality of service 0,1,2</param>
            <param name="retain">If the topic will be retain or not on the broker True/False</param>
        </member>
        <member name="M:Coreflux.API.cSharp.Networking.MQTT.MQTTController.GetData(System.String,System.Int32)">
            <summary>
            Gets the topics we are subscribed and provides the last received values
            </summary>
            <param name="topic">The topic it is required to publish </param>
            <param name="qoslevel">The quality of service required 0,1,2</param>
            <returns>The last payload received in hte topic</returns>
        </member>
        <member name="M:Coreflux.API.cSharp.Networking.MQTT.MQTTController.GetDataAsync(System.String,System.Int32)">
            <summary>
            Gets topic data Async mode
            </summary>
            <param name="topic">The topic it is required to publish </param>
            <param name="qoslevel">The quality of service required 0,1,2</param>
            <returns>The last payload received in hte topic</returns>
        </member>
    </members>
</doc>
